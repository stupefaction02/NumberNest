unit uBaseLogger;

interface

uses
  SysUtils, Classes, Unit3, uLogGeneral;

type
  TBaseLogger = class
  public
    procedure Log(const Msg: string; LogLevel: TLogLevel = llInfo);
    procedure AddProvider(const Provider: TBaseLogProvider);
  private
    LoggerName: string;
    Providers: TList;//<TBaseLogProvider>;
  constructor Create(const LoggerName: string);
  destructor Destroy();
end;

implementation

constructor TBaseLogger.Create(const LoggerName: string);
begin
    Self.LoggerName := LoggerName;
    Providers := Providers.Create;
end;

destructor TBaseLogger.Destroy();
var
  I: Integer;
begin
  for I := Providers.Count - 1 downto 0 do
    begin
      TBaseLogProvider(Providers[I]).Free;
    end;
  Providers.Free;
end;

procedure TBaseLogger.AddProvider(const Provider: TBaseLogProvider);
begin
    Providers.Add(Provider);
end;

procedure TBaseLogger.Log(const Msg: string; LogLevel: TLogLevel = llInfo);
var
  LogFile: TextFile;
  LogLine: string;
  I: Integer;
begin
  case LogLevel of
    llInfo: LogLine := Format('info: %s %s', [ Self.LoggerName, Msg ]);
    llError: LogLine := Format('error: %s %s', [ Self.LoggerName, Msg ]);
    llDebug: LogLine := Format('dbg: %s %s', [ Self.LoggerName, Msg ]);
  end;

  try
     for I := Providers.Count - 1 downto 0 do
        begin
          TBaseLogProvider(Providers[I]).LogMessage(LogLine, LogLevel);
        end;
  except
    on E: Exception do
    begin
      WriteLn('Ошибка записи в лог-файл: ', E.Message);
    end;
  end;

end;


end.
