unit Unit2;

interface

uses
  DUnitX.TestFramework, uShellSort, uArrayHelper, uHeapSort;

type
  [TestFixture]
  NumberNestTests = class
  public
    [Setup]
    procedure Setup;
    [TearDown]
    procedure TearDown;

    [Test]
    procedure MediumSortTest;

    [Test]
    procedure SmallSortTest();

    [Test]
    procedure BigSortTest();
  end;

var
  ShellSort1: TShellSort;
  THeapSort1: THeapSort;

implementation

procedure NumberNestTests.Setup;
begin
  ShellSort1 := TShellSort.Create;
  THeapSort1 := THeapSort.Create;
end;

procedure NumberNestTests.TearDown;
begin
  ShellSort1.Free;
  THeapSort1.Free;
end;

procedure NumberNestTests.MediumSortTest;
var
  InAscenndingOrder: BOOLEAN;
  Arranged: TArray<Integer>;
begin
  Arranged := TArrayHelper.CreateRandom(25);

  ShellSort1.Sort(Arranged);

  InAscenndingOrder := TArrayHelper.IsInAscendingOrder(Arranged);

  Assert.IsTrue(InAscenndingOrder);
end;

procedure NumberNestTests.SmallSortTest();
var
  InAscenndingOrder: BOOLEAN;
  Arranged: TArray<Integer>;
begin
  Arranged := TArrayHelper.CreateRandom(5);

  ShellSort1.Sort(Arranged);

  InAscenndingOrder := TArrayHelper.IsInAscendingOrder(Arranged);

  Assert.IsTrue(InAscenndingOrder);
end;

procedure NumberNestTests.BigSortTest();
var
  InAscenndingOrder: BOOLEAN;
  Arranged: TArray<Integer>;
begin
  Arranged := TArrayHelper.CreateRandom(10000);

  ShellSort1.Sort(Arranged);

  InAscenndingOrder := TArrayHelper.IsInAscendingOrder(Arranged);

  Assert.IsTrue(InAscenndingOrder);
end;

initialization
  TDUnitX.RegisterTestFixture(NumberNestTests);

end.
