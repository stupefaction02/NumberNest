unit uThreading;

interface

uses
  uLogging, System.Classes, System.SysUtils;

type
  TThreadScheduler = class(TThread)
    public
      procedure ExecuteNow(Task: TProc);
      constructor Create;
      procedure ExecuteTask(Task: TProc);
    private
      WorkThread: TThread;
      TaskQueue: TObjectList<TProc>;
      IsTerminated: BOOLEAN;
  end;

implementation

procedure TThreadScheduler.ExecuteNow(Task: TProc);
begin
  TaskQueue.LockList.Add(@Task);
end;

procedure TThreadScheduler.ExecuteTask(Task: TProc);
begin

end;

constructor TThreadScheduler.Create;
var
  Task: TProc;
  TaskList: TList;
begin

  inherited Create(true);

  TaskQueue := TThreadList.Create;

  WorkThread := TThread.CreateAnonymousThread(
    procedure
    begin
      while not Terminated do
      begin
        TaskList := TaskQueue.LockList;
        try
          if TaskList.Count > 0 then
          begin
            //Task := TaskQueue.LockList[0];
            //Task();

            TaskList[0];

            TaskQueue.Remove(0);
          end
          else
            Sleep(10);
        finally
          //TaskQueue.UnlockList;
        end;
      end;
    end
  );
  WorkThread.FreeOnTerminate := False;
  //WorkThread.OnTerminate := WorkThreadTerminated;
  WorkThread.Start;
end;
end.
